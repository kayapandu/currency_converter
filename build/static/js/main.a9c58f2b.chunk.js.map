{"version":3,"sources":["components/FormInputCurrency.js","components/DisplayCurrency.js","containers/ContentForeign.js","actions/index.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["FormInputCurrency","_this$props","this","props","value","updateValue","react_default","a","createElement","InputGroup","InputGroupAddon","size","addonType","Input","type","onChange","placeholder","React","Component","DisplayCurrency","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this","name","ratesValue","nowRates","Col","style","styles","boxCurrency","xs","display","flexDirection","flexWrap","justifyContent","fontWeight","fontSize","textAlign","padding","marginLeft","concat","alignItems","alignSelf","Button","width","onClick","removeRates","border","borderRadius","margin","ContentForeign","_handleOnChange","e","setState","valueRates","target","_onAddRates","preventDefault","state","addActiveRates","_onRemoveRates","removeActiveRates","_onUpdateInitialValue","updateInitialValue","getData","_this2","initialValue","rates","activeRates","Label","components_FormInputCurrency","map","item","index","roundedRates","parseFloat","toFixed","components_DisplayCurrency","key","Form","onSubmit","sm","keys","connect","dispatch","axios","get","then","response","payload","fetchData","data","App","Container","containers_ContentForeign","Boolean","window","location","hostname","match","initialState","arguments","length","undefined","action","objectSpread","toConsumableArray","filter","ccy","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9c58f2b.chunk.js","sourcesContent":["import React from 'react';\nimport { InputGroup, InputGroupAddon, Input } from 'reactstrap';\n\nclass FormInputCurrency extends React.Component {\n\n    render(){\n        const { value, updateValue } = this.props;\n        return(\n            <InputGroup>\n                <InputGroupAddon size=\"lg\" addonType=\"prepend\">USD</InputGroupAddon>\n                <Input type=\"number\" onChange={updateValue} placeholder=\"Input Amount\" value={value} />\n            </InputGroup>\n        )\n    }\n}\n\nexport default FormInputCurrency;","import React from 'react';\nimport { Col, Button } from 'reactstrap';\n\nclass DisplayCurrency extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n    const { name, ratesValue, nowRates } = this.props;\n        return(\n            <Col style={styles.boxCurrency}>\n                <Col xs=\"10\">\n                    <Col style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        flexWrap: \"wrap\",\n                        justifyContent: \"space-between\",\n\n                        }}\n                    >\n                        <Col xs=\"6\" style={{fontWeight: \"bold\", fontSize: \"24px\"}}>\n                            {name}\n                        </Col>\n                        <Col xs=\"6\"  style={{fontWeight: \"bold\", fontSize: \"24px\", textAlign: \"right\"}}>\n                            {ratesValue}\n                        </Col>\n                    </Col>\n                    <Col style={{padding: \"10px\", marginLeft: \"20px\"}}>\n                    {`1 USD = ${name} ${nowRates}`}\n                    </Col>\n                </Col>\n                <Col style={{ alignItems: \"stretch\", alignSelf: \"center\", textAlign: \"center\"}}>\n                    <Button style={{width: \"100%\"}} onClick={() => this.props.removeRates(name)}>Remove</Button>\n                </Col>\n            </Col>\n        );\n    }\n\n}\n\nexport default DisplayCurrency;\n\nconst styles = {\n    boxCurrency : {\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        border: \"1px black solid\",\n        borderRadius: \"0.5em\",\n        margin: \"5px\",\n        padding: \"10px\"\n    }\n}","import React from 'react';\nimport FormInputCurrency from '../components/FormInputCurrency';\nimport DisplayCurrency from '../components/DisplayCurrency';\nimport { getData, addActiveRates, removeActiveRates, updateInitialValue } from '../actions';\nimport { Col, Form, Label, Input, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\n\nclass ContentForeign extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            valueRates: ''\n        }\n    }\n\n    componentDidMount(){\n        this.props.getData();\n    }\n\n    _handleOnChange = (e) => {\n        this.setState({\n            valueRates: e.target.value\n        })\n    }\n\n    _onAddRates = (e) => {\n        e.preventDefault();\n        if(this.state.valueRates !== '') this.props.addActiveRates(this.state.valueRates);\n    }\n\n    _onRemoveRates = (value) => {\n        this.props.removeActiveRates(value);\n    }\n\n    _onUpdateInitialValue = (e) => {\n        this.props.updateInitialValue(e.target.value);\n    }\n\n    render(){\n        const { initialValue, rates, activeRates } = this.props;\n        return (\n            <Col>\n                <Col \n                    style={{\n                        border: \"1px black solid\",\n                        borderRadius: \"0.5em\",\n                        margin: \"5px\",\n                        padding: \"10px 30px 30px\"\n                    }}\n                >\n                    <Label style={{fontSize: \"16px\", fontWeight: \"bold\"}}>USD - United States Dollar</Label>\n                    <FormInputCurrency updateValue={this._onUpdateInitialValue} value={initialValue} />\n                </Col>\n                {activeRates.map((item, index) => {\n                    const thisRates = parseFloat(initialValue * rates[item]);\n                    const roundedRates = thisRates.toFixed(2);\n                    return (\n                        <DisplayCurrency \n                            key={index} \n                            name={item} \n                            removeRates={this._onRemoveRates}\n                            ratesValue={roundedRates}\n                            nowRates={rates[item]}\n                            />\n                    )\n                })}\n                <Col \n                    style={{\n                        border: \"1px black solid\",\n                        borderRadius: \"0.5em\",\n                        margin: \"5px\",\n                        //padding: \"10px 30px 30px\"\n                    }}\n                >\n                    <Form \n                        style={{width: \"100%\", padding: \"0px\"}}\n                        onSubmit={this._onAddRates}\n                    >\n                        <Col\n                            style={{\n                                display: \"flex\", \n                                flexDirection: \"row\", \n                                flexWrap: \"wrap\",\n                                padding: \"15px\",\n                                justifyContent: \"space-around\"\n                                }}\n                        >\n                            <Col sm=\"8\">\n                                <Input\n                                    type=\"select\"\n                                    onChange={this._handleOnChange}\n                                >\n                                    <option>Add currency ...</option>\n                                    {Object.keys(rates).map((item, index) => {\n                                        return (<option value={item} key={index} >{item}</option>);\n                                    })}\n                                </Input>\n                            </Col>\n                            <Col style={{alignItems: \"center\", textAlign: \"center\"}}>\n                                <Button style={{width: \"100%\"}}>Add</Button>\n                            </Col>\n                        </Col>\n                    </Form>\n                </Col>\n            </Col>\n        )\n    }\n    \n}\n\nconst mapStateToProps = (state) => ({\n    initialValue: state.initialValue,\n    rates: state.rates,\n    activeRates: state.activeRates\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    getData: () => dispatch(getData()),\n    updateInitialValue: (value) => dispatch(updateInitialValue(value)),\n    addActiveRates: (value) => dispatch(addActiveRates(value)),\n    removeActiveRates: (value) => dispatch(removeActiveRates(value))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ContentForeign);","import axios from 'axios';\n\nexport const fetchData = (response) => {\n    return ({\n        type: 'FETCH_DATA',\n        payload: response\n    });\n}\n\nexport const addActiveRates = (value) => {\n    return ({\n        type: 'ADD_ACTIVE_RATES',\n        payload: value\n    });\n}\n\nexport const updateInitialValue = (value) => {\n    return ({\n        type: 'UPDATE_INITIAL_VALUE',\n        payload: value\n    })\n}\n\nexport const removeActiveRates = (value) => {\n    return ({\n        type: 'REMOVE_ACTIVE_RATES',\n        payload: value\n    });\n}\n\nexport const getData = () => {\n    return(dispatch) => {\n        axios.get('https://api.exchangeratesapi.io/latest?base=USD')\n        .then(response => {\n            dispatch(fetchData(response.data.rates))\n        })\n    }\n}","import React from 'react';\nimport './App.css';\nimport ContentForeign from './containers/ContentForeign';\nimport { Container } from 'reactstrap';\n\nfunction App() {\n  return (\n    <Container>\n          <ContentForeign />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    initialValue: 10,\n    rates: [],\n    activeRates: []\n}\n\nexport const rates = (state = initialState, action) => {\n    switch(action.type) {\n        case 'FETCH_DATA':\n            return ({\n                ...state,\n                rates: action.payload\n            })\n        case 'UPDATE_INITIAL_VALUE':\n            return ({\n                ...state,\n                initialValue: action.payload\n            })\n        case 'ADD_ACTIVE_RATES':\n            return ({\n                ...state,\n                activeRates: [\n                    ...state.activeRates,\n                    action.payload\n                ]\n            })\n        case 'REMOVE_ACTIVE_RATES':\n            return ({\n                ...state,\n                activeRates: state.activeRates.filter(ccy => ccy !== action.payload)\n            })\n        default:\n            return state;\n    }\n}\n\nexport default rates;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}